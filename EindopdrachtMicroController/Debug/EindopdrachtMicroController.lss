
EindopdrachtMicroController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  000002ba  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ee8  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a29  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000630  00000000  00000000  00001e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  0000248c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005dc  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000406  00000000  00000000  00002bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002ffa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	e6 d0       	rcall	.+460    	; 0x280 <main>
  b4:	00 c1       	rjmp	.+512    	; 0x2b6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <show_first_animation>:
	The animation turns on all lights in a specific order.
	Thanks to the arrays the pattern is already in the right order. 
 */
 /************************************************************************/
 void show_first_animation(void)
 {
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	c0 e4       	ldi	r28, 0x40	; 64
  c6:	d1 e0       	ldi	r29, 0x01	; 1
  c8:	00 ec       	ldi	r16, 0xC0	; 192
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	0f 2e       	mov	r0, r31
  ce:	f0 e8       	ldi	r31, 0x80	; 128
  d0:	ef 2e       	mov	r14, r31
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	ff 2e       	mov	r15, r31
  d6:	f0 2d       	mov	r31, r0
	 
	 int x;
	 for(x = 0; x < 64; x++){
		 
			 write_data(firstAnimationColumn[x], firstAnimationRow[x]);
  d8:	69 91       	ld	r22, Y+
  da:	f8 01       	movw	r30, r16
  dc:	81 91       	ld	r24, Z+
  de:	8f 01       	movw	r16, r30
  e0:	a2 d0       	rcall	.+324    	; 0x226 <write_data>
			 wait(15);
  e2:	8f e0       	ldi	r24, 0x0F	; 15
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	b0 d0       	rcall	.+352    	; 0x248 <wait>
 /************************************************************************/
 void show_first_animation(void)
 {
	 
	 int x;
	 for(x = 0; x < 64; x++){
  e8:	ce 15       	cp	r28, r14
  ea:	df 05       	cpc	r29, r15
  ec:	a9 f7       	brne	.-22     	; 0xd8 <show_first_animation+0x20>
		 
			 write_data(firstAnimationColumn[x], firstAnimationRow[x]);
			 wait(15);
		 
	 }
 }
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	ff 90       	pop	r15
  f8:	ef 90       	pop	r14
  fa:	08 95       	ret

000000fc <show_second_animation>:
	The animation turns on all lights in a specific order.
	Thanks to the arrays the pattern is already in the right order. 
 */
 /************************************************************************/
 void show_second_animation(void)
 {
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d1 e0       	ldi	r29, 0x01	; 1
 10c:	00 e8       	ldi	r16, 0x80	; 128
 10e:	11 e0       	ldi	r17, 0x01	; 1
 110:	0f 2e       	mov	r0, r31
 112:	f0 e4       	ldi	r31, 0x40	; 64
 114:	ef 2e       	mov	r14, r31
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	ff 2e       	mov	r15, r31
 11a:	f0 2d       	mov	r31, r0
	
	 int x;
	 for(x = 0; x < 64; x++){
	
			 write_data(secondAnimationColumn[x], secondAnimationRow[x]);
 11c:	69 91       	ld	r22, Y+
 11e:	f8 01       	movw	r30, r16
 120:	81 91       	ld	r24, Z+
 122:	8f 01       	movw	r16, r30
 124:	80 d0       	rcall	.+256    	; 0x226 <write_data>
			 wait(15);
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	8e d0       	rcall	.+284    	; 0x248 <wait>
 /************************************************************************/
 void show_second_animation(void)
 {
	
	 int x;
	 for(x = 0; x < 64; x++){
 12c:	ce 15       	cp	r28, r14
 12e:	df 05       	cpc	r29, r15
 130:	a9 f7       	brne	.-22     	; 0x11c <show_second_animation+0x20>
	
			 write_data(secondAnimationColumn[x], secondAnimationRow[x]);
			 wait(15);
		 
	 } 
 }
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	08 95       	ret

00000140 <reverse_second_animation>:
	It uses a for loop to go through the arrays in reverse order
	where the data for the animation is stored.
 */
 /************************************************************************/
 void reverse_second_animation(void)
 {
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	c1 e4       	ldi	r28, 0x41	; 65
 14e:	d1 e0       	ldi	r29, 0x01	; 1
 150:	01 ec       	ldi	r16, 0xC1	; 193
 152:	11 e0       	ldi	r17, 0x01	; 1
 154:	0f 2e       	mov	r0, r31
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	ef 2e       	mov	r14, r31
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	ff 2e       	mov	r15, r31
 15e:	f0 2d       	mov	r31, r0
	 
	 int x;
	 for(x = 64; x > 0; x--){
		 
		 write_data(secondAnimationColumn[x], secondAnimationRow[x]);
 160:	6a 91       	ld	r22, -Y
 162:	f8 01       	movw	r30, r16
 164:	82 91       	ld	r24, -Z
 166:	8f 01       	movw	r16, r30
 168:	5e d0       	rcall	.+188    	; 0x226 <write_data>
		 wait(15);
 16a:	8f e0       	ldi	r24, 0x0F	; 15
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	6c d0       	rcall	.+216    	; 0x248 <wait>
 /************************************************************************/
 void reverse_second_animation(void)
 {
	 
	 int x;
	 for(x = 64; x > 0; x--){
 170:	ce 15       	cp	r28, r14
 172:	df 05       	cpc	r29, r15
 174:	a9 f7       	brne	.-22     	; 0x160 <reverse_second_animation+0x20>
		 
		 write_data(secondAnimationColumn[x], secondAnimationRow[x]);
		 wait(15);
		 
	 }
 }
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	08 95       	ret

00000184 <clear>:
 /*                                                                   
	This function clears the dot matrix.    
 */
 /************************************************************************/
 void clear()
 {
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	c0 ec       	ldi	r28, 0xC0	; 192
 18e:	d1 e0       	ldi	r29, 0x01	; 1
 190:	08 ec       	ldi	r16, 0xC8	; 200
 192:	11 e0       	ldi	r17, 0x01	; 1
	int i;
	for (i = 0; i < 8; i++ )
	{
		write_data(firstAnimationColumn[i], 0);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	89 91       	ld	r24, Y+
 198:	46 d0       	rcall	.+140    	; 0x226 <write_data>
		wait(1/100);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	54 d0       	rcall	.+168    	; 0x248 <wait>
 */
 /************************************************************************/
 void clear()
 {
	int i;
	for (i = 0; i < 8; i++ )
 1a0:	c0 17       	cp	r28, r16
 1a2:	d1 07       	cpc	r29, r17
 1a4:	b9 f7       	brne	.-18     	; 0x194 <clear+0x10>
	{
		write_data(firstAnimationColumn[i], 0);
		wait(1/100);
	}
 }
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret

000001b0 <twi_start>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1b0:	84 ea       	ldi	r24, 0xA4	; 164
 1b2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1b6:	e4 e7       	ldi	r30, 0x74	; 116
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	88 23       	and	r24, r24
 1be:	ec f7       	brge	.-6      	; 0x1ba <twi_start+0xa>
 1c0:	08 95       	ret

000001c2 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 1c2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 1c6:	84 e8       	ldi	r24, 0x84	; 132
 1c8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 1cc:	e4 e7       	ldi	r30, 0x74	; 116
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	88 23       	and	r24, r24
 1d4:	ec f7       	brge	.-6      	; 0x1d0 <twi_tx+0xe>
}
 1d6:	08 95       	ret

000001d8 <twi_init>:
inputs:
outputs:
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
	TWSR = 0;
 1de:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 64;	 // TWI clock set to 100kHz, prescaler = 0
 1e2:	80 e4       	ldi	r24, 0x40	; 64
 1e4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	// Init HT16K22. Page 32 datasheet
	twi_start();
 1e8:	e3 df       	rcall	.-58     	; 0x1b0 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 1ea:	80 ee       	ldi	r24, 0xE0	; 224
 1ec:	ea df       	rcall	.-44     	; 0x1c2 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 1ee:	81 e2       	ldi	r24, 0x21	; 33
 1f0:	e8 df       	rcall	.-48     	; 0x1c2 <twi_tx>
 1f2:	c4 e7       	ldi	r28, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1f4:	d0 e0       	ldi	r29, 0x00	; 0
 1f6:	14 e9       	ldi	r17, 0x94	; 148
 1f8:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
	
	twi_start();
 1fa:	da df       	rcall	.-76     	; 0x1b0 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 1fc:	80 ee       	ldi	r24, 0xE0	; 224
 1fe:	e1 df       	rcall	.-62     	; 0x1c2 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 200:	80 ea       	ldi	r24, 0xA0	; 160
 202:	df df       	rcall	.-66     	; 0x1c2 <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 204:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();
	
	twi_start();
 206:	d4 df       	rcall	.-88     	; 0x1b0 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 208:	80 ee       	ldi	r24, 0xE0	; 224
 20a:	db df       	rcall	.-74     	; 0x1c2 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 20c:	83 ee       	ldi	r24, 0xE3	; 227
 20e:	d9 df       	rcall	.-78     	; 0x1c2 <twi_tx>
 210:	18 83       	st	Y, r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 212:	ce df       	rcall	.-100    	; 0x1b0 <twi_start>
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();
	
	twi_start();
 214:	80 ee       	ldi	r24, 0xE0	; 224
 216:	d5 df       	rcall	.-86     	; 0x1c2 <twi_tx>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 218:	81 e8       	ldi	r24, 0x81	; 129
 21a:	d3 df       	rcall	.-90     	; 0x1c2 <twi_tx>
 21c:	18 83       	st	Y, r17
	twi_tx(0x81);	// Display OFF - Blink On
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 224:	08 95       	ret

00000226 <write_data>:
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
	
}
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	d8 2f       	mov	r29, r24
 22c:	c6 2f       	mov	r28, r22
	while( 0 == (TWCR & 0x80) );
}

void write_data(unsigned char adress,unsigned char data)
{
	twi_start();
 22e:	c0 df       	rcall	.-128    	; 0x1b0 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 230:	80 ee       	ldi	r24, 0xE0	; 224
 232:	c7 df       	rcall	.-114    	; 0x1c2 <twi_tx>
	twi_tx(adress);	// Address
 234:	8d 2f       	mov	r24, r29
 236:	c5 df       	rcall	.-118    	; 0x1c2 <twi_tx>
	twi_tx(data);	// data
 238:	8c 2f       	mov	r24, r28
 23a:	c3 df       	rcall	.-122    	; 0x1c2 <twi_tx>
 23c:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 23e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 242:	df 91       	pop	r29
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(adress);	// Address
	twi_tx(data);	// data
	twi_stop();
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <wait>:
 248:	18 16       	cp	r1, r24
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 24a:	19 06       	cpc	r1, r25
 24c:	6c f4       	brge	.+26     	; 0x268 <wait+0x20>
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	ef ec       	ldi	r30, 0xCF	; 207
 254:	f7 e0       	ldi	r31, 0x07	; 7
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <wait+0xe>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <wait+0x14>
 25c:	00 00       	nop
 25e:	2f 5f       	subi	r18, 0xFF	; 255
 260:	3f 4f       	sbci	r19, 0xFF	; 255
 262:	82 17       	cp	r24, r18
 264:	93 07       	cpc	r25, r19
 266:	a9 f7       	brne	.-22     	; 0x252 <wait+0xa>
 268:	08 95       	ret

0000026a <initMatrix>:
	initMatrix()

	This will initialize the matrix for writing text on the matrix display
*/
void initMatrix(void){
	twi_init();
 26a:	b6 df       	rcall	.-148    	; 0x1d8 <twi_init>

	
	DDRA = 0b11111111;
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	8a bb       	out	0x1a, r24	; 26

	EICRB |= 0b11000000; //set INT7 faling edge
 270:	8a b7       	in	r24, 0x3a	; 58
 272:	80 6c       	ori	r24, 0xC0	; 192
 274:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= 0b10000000; //enable INT&
 276:	89 b7       	in	r24, 0x39	; 57
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	89 bf       	out	0x39, r24	; 57
	//enable global interrupt system
	sei();
 27c:	78 94       	sei
 27e:	08 95       	ret

00000280 <main>:

	Method that will be called on start-up. With a forever loop that will show the text and scrolls it
*/
int main(void)
{
	initMatrix();
 280:	f4 df       	rcall	.-24     	; 0x26a <initMatrix>
	wait(500);
 282:	84 ef       	ldi	r24, 0xF4	; 244
 284:	91 e0       	ldi	r25, 0x01	; 1

	clear();	
 286:	e0 df       	rcall	.-64     	; 0x248 <wait>
 288:	7d df       	rcall	.-262    	; 0x184 <clear>
	
	for (;;)
	{
	show_first_animation();
 28a:	16 df       	rcall	.-468    	; 0xb8 <show_first_animation>
	wait(20);
 28c:	84 e1       	ldi	r24, 0x14	; 20
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	db df       	rcall	.-74     	; 0x248 <wait>
	clear();
 292:	78 df       	rcall	.-272    	; 0x184 <clear>
 294:	84 e1       	ldi	r24, 0x14	; 20
	wait(20);
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	d7 df       	rcall	.-82     	; 0x248 <wait>
	show_second_animation();
 29a:	30 df       	rcall	.-416    	; 0xfc <show_second_animation>
	wait(20);
 29c:	84 e1       	ldi	r24, 0x14	; 20
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	d3 df       	rcall	.-90     	; 0x248 <wait>
	clear();
 2a2:	70 df       	rcall	.-288    	; 0x184 <clear>
 2a4:	84 e1       	ldi	r24, 0x14	; 20
	wait(20);
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	cf df       	rcall	.-98     	; 0x248 <wait>
 2aa:	4a df       	rcall	.-364    	; 0x140 <reverse_second_animation>
 2ac:	84 e1       	ldi	r24, 0x14	; 20
	reverse_second_animation();
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	cb df       	rcall	.-106    	; 0x248 <wait>
	wait(20);
 2b2:	68 df       	rcall	.-304    	; 0x184 <clear>
 2b4:	ea cf       	rjmp	.-44     	; 0x28a <main+0xa>

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
